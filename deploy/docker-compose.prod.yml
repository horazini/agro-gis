
version: '3'

services:
  nginx-proxy:
    container_name: nginx-proxy
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy

  letsencrypt:
    container_name: letsencrypt
    image: nginxproxy/acme-companion
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
    volumes:
      - certs:/etc/nginx/certs:rw
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro

  postgres:
    container_name: postgres-db
    image: postgis/postgis:14-3.4-alpine
    restart: always
    env_file: ./.env.prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: postgres
    volumes:
      - ../database/volume:/var/lib/postgresql/data
      - ../database/pgseed.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  express-server:
    container_name: express-server
    build:
      context: ../server
    restart: always
    depends_on:
      - postgres
    env_file: ./.env.prod

  client:
    container_name: nginx-react-client
    restart: always
    build: 
      context: ../client
    depends_on:
      - express-server

  nginx:
    container_name: nginx-reverse-proxy
    restart: always
    build: ./nginx
    expose:
      - '80'
    depends_on:
      - express-server
      - client
      - nginx-proxy
      - letsencrypt
    environment:
      - VIRTUAL_HOST=agrosense.tech,www.agrosense.tech
      - LETSENCRYPT_HOST=agrosense.tech,www.agrosense.tech

volumes:
  certs:
  html:
  vhostd:
  acme: